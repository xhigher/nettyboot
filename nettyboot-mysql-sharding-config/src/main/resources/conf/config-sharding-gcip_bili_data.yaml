#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

######################################################################################################
# 
# Here you can configure the rules for the proxy.
# This example is configuration of sharding rule.
#   
# If you want to use sharding, please refer to this file; 
# if you want to use master-slave, please refer to the config-master_slave.yaml.
# if you want to use master-slave, please refer to the config-encrypt.yaml.
# 
######################################################################################################
#
#schemaName: sharding_db
#
#dataSources:
#  ds_0:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_ds_0?serverTimezone=UTC&useSSL=false
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#  ds_1:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_ds_1?serverTimezone=UTC&useSSL=false
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#
#shardingRule:
#  tables:
#    t_order:
#      actualDataNodes: ds_${0..1}.t_order_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_${order_id % 2}
#      keyGenerator:
#        type: SNOWFLAKE
#        column: order_id
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_item_${order_id % 2}
#      keyGenerator:
#        type: SNOWFLAKE
#        column: order_item_id
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    inline:
#      shardingColumn: user_id
#      algorithmExpression: ds_${user_id % 2}
#  defaultTableStrategy:
#    none:
#
######################################################################################################
#
# If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.
#
######################################################################################################

#schemaName: sharding_db
#
#dataSources:
#  ds_0:
#    url: jdbc:mysql://127.0.0.1:3306/demo_ds_0?serverTimezone=UTC&useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#  ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/demo_ds_1?serverTimezone=UTC&useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#
#shardingRule:
#  tables:
#    t_order:
#      actualDataNodes: ds_${0..1}.t_order_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_${order_id % 2}
#      keyGenerator:
#        type: SNOWFLAKE
#        column: order_id
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_item_${order_id % 2}
#      keyGenerator:
#        type: SNOWFLAKE
#        column: order_item_id
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    inline:
#      shardingColumn: user_id
#      algorithmExpression: ds_${user_id % 2}
#  defaultTableStrategy:
#    none:

schemaName: gcip_bili_data

dataSources:
    gcip_bili_data:
        url: jdbc:mysql://172.18.0.252:3308/gcip_bili_data?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8&nullNamePatternMatchesAll=true
        username: root
        password: 123456

shardingRule:
    tables:
        user_info:
            actualDataNodes: gcip_bili_data.user_info_2021
            tableStrategy:
                standard:
                    shardingColumn: ymd
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseYmdYearShardingTableAlgorithm
                    rangeAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.RangeYmdYearShardingTableAlgorithm
        user_info_more:
            actualDataNodes: gcip_bili_data.user_info_more_2021
            tableStrategy:
                standard:
                    shardingColumn: ymd
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseYmdYearShardingTableAlgorithm
                    rangeAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.RangeYmdYearShardingTableAlgorithm
        video_info:
            actualDataNodes: gcip_bili_data.video_info_20210$->{4..9},gcip_bili_data.video_info_20211$->{0..2}
            tableStrategy:
                standard:
                    shardingColumn: ymd
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseYmdMonthShardingTableAlgorithm
                    rangeAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.RangeYmdMonthShardingTableAlgorithm
        video_info_more:
            actualDataNodes: gcip_bili_data.video_info_more_20210$->{4..9},gcip_bili_data.video_info_more_20211$->{0..2}
            tableStrategy:
                standard:
                    shardingColumn: ymd
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseYmdMonthShardingTableAlgorithm
                    rangeAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.RangeYmdMonthShardingTableAlgorithm

        video_industry2_rel:
            actualDataNodes: gcip_bili_data.video_industry2_rel_$->{1..8}
            tableStrategy:
                standard:
                    shardingColumn: industryid
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseHashIntegerShardingDatabaseAlgorithm
        video_brand_rel:
            actualDataNodes: gcip_bili_data.video_brand_rel_$->{1..8}
            tableStrategy:
                standard:
                    shardingColumn: brandid
                    preciseAlgorithmClassName: com.nettyboot.shardingproxy.algorithm.PreciseHashIntegerShardingDatabaseAlgorithm
            keyGenerator:
                type: SNOWFLAKE
                column: id

        # 品牌表
        brand_info:
            actualDataNodes: gcip_bili_data.brand_info
        # 行业表
        industry_info:
            actualDataNodes: gcip_bili_data.industry_info
        # 品牌行业关联表
        brand_industry_rel:
            actualDataNodes: gcip_bili_data.brand_industry_rel

        # 用户 视频标签分布数据
        production_tags:
            actualDataNodes: gcip_bili_data.production_tags
        # B站热门排行榜各榜数据
        all_rank_data:
            actualDataNodes: gcip_bili_data.all_rank_data

        # 行业视频
        collect_industry_video_1:
            actualDataNodes: gcip_bili_data.collect_industry_video_1
        # B站热门-热门榜单数据
        hot_rank:
            actualDataNodes: gcip_bili_data.hot_rank

        # B站关键字数据
        search_keywords:
            actualDataNodes: gcip_bili_data.search_keywords
        # B站搜索专栏文章数据
        special_column_info:
            actualDataNodes: gcip_bili_data.special_column_info
        # B站作者动态数据
        user_dynamic:
            actualDataNodes: gcip_bili_data.user_dynamic
        # 超过一定量视频的用户，疑似机器人
        user_info_robot:
            actualDataNodes: gcip_bili_data.user_info_robot
        ## 待分表
        # B站视频评论数据
        video_comment_info:
            actualDataNodes: gcip_bili_data.video_comment_info
        # B站视频弹幕数据
        video_danmaku:
            actualDataNodes: gcip_bili_data.video_danmaku

        ## 不分表
        # 用户最新数据
        user_info_current:
            actualDataNodes: gcip_bili_data.user_info_current
        # 用户最新补充数据
        user_info_current_more:
            actualDataNodes: gcip_bili_data.user_info_current_more
        # 视频最新数据
        video_info_current:
            actualDataNodes: gcip_bili_data.video_info_current
        # 视频最新补充数据
        video_info_current_more:
            actualDataNodes: gcip_bili_data.video_info_current_more
        # B站视频唯一记录数据
        video_sole:
            actualDataNodes: gcip_bili_data.video_sole
        # B站视频分区数据
        video_type_info:
            actualDataNodes: gcip_bili_data.video_type_info

    bindingTables:
        - user_info, user_info_more
        - video_info, video_info_more
#    broadcastTables:
#        - brand_info
    defaultDataSourceName: gcip_bili_data
    defaultDatabaseStrategy:
        none:
    defaultTableStrategy:
        none:

